# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lwrtb', [dirname(__file__)])
        except ImportError:
            import _lwrtb
            return _lwrtb
        if fp is not None:
            try:
                _mod = imp.load_module('_lwrtb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lwrtb = swig_import_helper()
    del swig_import_helper
else:
    import _lwrtb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _lwrtb.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _lwrtb.SwigPyIterator_value(self)
    def incr(self, n = 1): return _lwrtb.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _lwrtb.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _lwrtb.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _lwrtb.SwigPyIterator_equal(self, *args)
    def copy(self): return _lwrtb.SwigPyIterator_copy(self)
    def next(self): return _lwrtb.SwigPyIterator_next(self)
    def __next__(self): return _lwrtb.SwigPyIterator___next__(self)
    def previous(self): return _lwrtb.SwigPyIterator_previous(self)
    def advance(self, *args): return _lwrtb.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _lwrtb.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _lwrtb.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _lwrtb.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _lwrtb.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _lwrtb.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _lwrtb.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _lwrtb.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

WIN = _lwrtb.WIN
LOSS = _lwrtb.LOSS
TOOLATE = _lwrtb.TOOLATE
INVALID = _lwrtb.INVALID
LOSTBID = _lwrtb.LOSTBID
DROPPEDBID = _lwrtb.DROPPEDBID
NOBUDGET = _lwrtb.NOBUDGET
BUG = _lwrtb.BUG

def BidStatusToString(*args):
  return _lwrtb.BidStatusToString(*args)
BidStatusToString = _lwrtb.BidStatusToString
class DeliveryEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event"] = _lwrtb.DeliveryEvent_event_set
    __swig_getmethods__["event"] = _lwrtb.DeliveryEvent_event_get
    if _newclass:event = _swig_property(_lwrtb.DeliveryEvent_event_get, _lwrtb.DeliveryEvent_event_set)
    __swig_setmethods__["timestamp"] = _lwrtb.DeliveryEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _lwrtb.DeliveryEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_lwrtb.DeliveryEvent_timestamp_get, _lwrtb.DeliveryEvent_timestamp_set)
    __swig_setmethods__["auctionId"] = _lwrtb.DeliveryEvent_auctionId_set
    __swig_getmethods__["auctionId"] = _lwrtb.DeliveryEvent_auctionId_get
    if _newclass:auctionId = _swig_property(_lwrtb.DeliveryEvent_auctionId_get, _lwrtb.DeliveryEvent_auctionId_set)
    __swig_setmethods__["spotId"] = _lwrtb.DeliveryEvent_spotId_set
    __swig_getmethods__["spotId"] = _lwrtb.DeliveryEvent_spotId_get
    if _newclass:spotId = _swig_property(_lwrtb.DeliveryEvent_spotId_get, _lwrtb.DeliveryEvent_spotId_set)
    __swig_setmethods__["spotIndex"] = _lwrtb.DeliveryEvent_spotIndex_set
    __swig_getmethods__["spotIndex"] = _lwrtb.DeliveryEvent_spotIndex_get
    if _newclass:spotIndex = _swig_property(_lwrtb.DeliveryEvent_spotIndex_get, _lwrtb.DeliveryEvent_spotIndex_set)
    __swig_setmethods__["bidRequest"] = _lwrtb.DeliveryEvent_bidRequest_set
    __swig_getmethods__["bidRequest"] = _lwrtb.DeliveryEvent_bidRequest_get
    if _newclass:bidRequest = _swig_property(_lwrtb.DeliveryEvent_bidRequest_get, _lwrtb.DeliveryEvent_bidRequest_set)
    __swig_setmethods__["augmentations"] = _lwrtb.DeliveryEvent_augmentations_set
    __swig_getmethods__["augmentations"] = _lwrtb.DeliveryEvent_augmentations_get
    if _newclass:augmentations = _swig_property(_lwrtb.DeliveryEvent_augmentations_get, _lwrtb.DeliveryEvent_augmentations_set)
    __swig_setmethods__["bid"] = _lwrtb.DeliveryEvent_bid_set
    __swig_getmethods__["bid"] = _lwrtb.DeliveryEvent_bid_get
    if _newclass:bid = _swig_property(_lwrtb.DeliveryEvent_bid_get, _lwrtb.DeliveryEvent_bid_set)
    __swig_setmethods__["win"] = _lwrtb.DeliveryEvent_win_set
    __swig_getmethods__["win"] = _lwrtb.DeliveryEvent_win_get
    if _newclass:win = _swig_property(_lwrtb.DeliveryEvent_win_get, _lwrtb.DeliveryEvent_win_set)
    __swig_setmethods__["campaignEvents"] = _lwrtb.DeliveryEvent_campaignEvents_set
    __swig_getmethods__["campaignEvents"] = _lwrtb.DeliveryEvent_campaignEvents_get
    if _newclass:campaignEvents = _swig_property(_lwrtb.DeliveryEvent_campaignEvents_get, _lwrtb.DeliveryEvent_campaignEvents_set)
    __swig_setmethods__["visits"] = _lwrtb.DeliveryEvent_visits_set
    __swig_getmethods__["visits"] = _lwrtb.DeliveryEvent_visits_get
    if _newclass:visits = _swig_property(_lwrtb.DeliveryEvent_visits_get, _lwrtb.DeliveryEvent_visits_set)
    def __init__(self): 
        this = _lwrtb.new_DeliveryEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_DeliveryEvent
    __del__ = lambda self : None;
DeliveryEvent_swigregister = _lwrtb.DeliveryEvent_swigregister
DeliveryEvent_swigregister(DeliveryEvent)

class DeliveryCb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryCb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryCb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == DeliveryCb:
            _self = None
        else:
            _self = self
        this = _lwrtb.new_DeliveryCb(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_DeliveryCb
    __del__ = lambda self : None;
    def call(self, *args): return _lwrtb.DeliveryCb_call(self, *args)
    def __disown__(self):
        self.this.disown()
        _lwrtb.disown_DeliveryCb(self)
        return weakref_proxy(self)
DeliveryCb_swigregister = _lwrtb.DeliveryCb_swigregister
DeliveryCb_swigregister(DeliveryCb)

class BidRequestEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidRequestEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BidRequestEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _lwrtb.BidRequestEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _lwrtb.BidRequestEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_lwrtb.BidRequestEvent_timestamp_get, _lwrtb.BidRequestEvent_timestamp_set)
    __swig_setmethods__["id"] = _lwrtb.BidRequestEvent_id_set
    __swig_getmethods__["id"] = _lwrtb.BidRequestEvent_id_get
    if _newclass:id = _swig_property(_lwrtb.BidRequestEvent_id_get, _lwrtb.BidRequestEvent_id_set)
    __swig_setmethods__["bidRequest"] = _lwrtb.BidRequestEvent_bidRequest_set
    __swig_getmethods__["bidRequest"] = _lwrtb.BidRequestEvent_bidRequest_get
    if _newclass:bidRequest = _swig_property(_lwrtb.BidRequestEvent_bidRequest_get, _lwrtb.BidRequestEvent_bidRequest_set)
    __swig_setmethods__["bids"] = _lwrtb.BidRequestEvent_bids_set
    __swig_getmethods__["bids"] = _lwrtb.BidRequestEvent_bids_get
    if _newclass:bids = _swig_property(_lwrtb.BidRequestEvent_bids_get, _lwrtb.BidRequestEvent_bids_set)
    __swig_setmethods__["timeLeftMs"] = _lwrtb.BidRequestEvent_timeLeftMs_set
    __swig_getmethods__["timeLeftMs"] = _lwrtb.BidRequestEvent_timeLeftMs_get
    if _newclass:timeLeftMs = _swig_property(_lwrtb.BidRequestEvent_timeLeftMs_get, _lwrtb.BidRequestEvent_timeLeftMs_set)
    __swig_setmethods__["augmentations"] = _lwrtb.BidRequestEvent_augmentations_set
    __swig_getmethods__["augmentations"] = _lwrtb.BidRequestEvent_augmentations_get
    if _newclass:augmentations = _swig_property(_lwrtb.BidRequestEvent_augmentations_get, _lwrtb.BidRequestEvent_augmentations_set)
    __swig_setmethods__["winCostModel"] = _lwrtb.BidRequestEvent_winCostModel_set
    __swig_getmethods__["winCostModel"] = _lwrtb.BidRequestEvent_winCostModel_get
    if _newclass:winCostModel = _swig_property(_lwrtb.BidRequestEvent_winCostModel_get, _lwrtb.BidRequestEvent_winCostModel_set)
    def __init__(self): 
        this = _lwrtb.new_BidRequestEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_BidRequestEvent
    __del__ = lambda self : None;
BidRequestEvent_swigregister = _lwrtb.BidRequestEvent_swigregister
BidRequestEvent_swigregister(BidRequestEvent)

class BidRequestCb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidRequestCb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BidRequestCb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == BidRequestCb:
            _self = None
        else:
            _self = self
        this = _lwrtb.new_BidRequestCb(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_BidRequestCb
    __del__ = lambda self : None;
    def call(self, *args): return _lwrtb.BidRequestCb_call(self, *args)
    def __disown__(self):
        self.this.disown()
        _lwrtb.disown_BidRequestCb(self)
        return weakref_proxy(self)
BidRequestCb_swigregister = _lwrtb.BidRequestCb_swigregister
BidRequestCb_swigregister(BidRequestCb)

class BidResultEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidResultEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BidResultEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _lwrtb.BidResultEvent_result_set
    __swig_getmethods__["result"] = _lwrtb.BidResultEvent_result_get
    if _newclass:result = _swig_property(_lwrtb.BidResultEvent_result_get, _lwrtb.BidResultEvent_result_set)
    __swig_setmethods__["timestamp"] = _lwrtb.BidResultEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _lwrtb.BidResultEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_lwrtb.BidResultEvent_timestamp_get, _lwrtb.BidResultEvent_timestamp_set)
    __swig_setmethods__["auctionId"] = _lwrtb.BidResultEvent_auctionId_set
    __swig_getmethods__["auctionId"] = _lwrtb.BidResultEvent_auctionId_get
    if _newclass:auctionId = _swig_property(_lwrtb.BidResultEvent_auctionId_get, _lwrtb.BidResultEvent_auctionId_set)
    __swig_setmethods__["spotNum"] = _lwrtb.BidResultEvent_spotNum_set
    __swig_getmethods__["spotNum"] = _lwrtb.BidResultEvent_spotNum_get
    if _newclass:spotNum = _swig_property(_lwrtb.BidResultEvent_spotNum_get, _lwrtb.BidResultEvent_spotNum_set)
    __swig_setmethods__["secondPrice"] = _lwrtb.BidResultEvent_secondPrice_set
    __swig_getmethods__["secondPrice"] = _lwrtb.BidResultEvent_secondPrice_get
    if _newclass:secondPrice = _swig_property(_lwrtb.BidResultEvent_secondPrice_get, _lwrtb.BidResultEvent_secondPrice_set)
    __swig_setmethods__["bidRequest"] = _lwrtb.BidResultEvent_bidRequest_set
    __swig_getmethods__["bidRequest"] = _lwrtb.BidResultEvent_bidRequest_get
    if _newclass:bidRequest = _swig_property(_lwrtb.BidResultEvent_bidRequest_get, _lwrtb.BidResultEvent_bidRequest_set)
    __swig_setmethods__["ourBid"] = _lwrtb.BidResultEvent_ourBid_set
    __swig_getmethods__["ourBid"] = _lwrtb.BidResultEvent_ourBid_get
    if _newclass:ourBid = _swig_property(_lwrtb.BidResultEvent_ourBid_get, _lwrtb.BidResultEvent_ourBid_set)
    __swig_setmethods__["metadata"] = _lwrtb.BidResultEvent_metadata_set
    __swig_getmethods__["metadata"] = _lwrtb.BidResultEvent_metadata_get
    if _newclass:metadata = _swig_property(_lwrtb.BidResultEvent_metadata_get, _lwrtb.BidResultEvent_metadata_set)
    __swig_setmethods__["augmentations"] = _lwrtb.BidResultEvent_augmentations_set
    __swig_getmethods__["augmentations"] = _lwrtb.BidResultEvent_augmentations_get
    if _newclass:augmentations = _swig_property(_lwrtb.BidResultEvent_augmentations_get, _lwrtb.BidResultEvent_augmentations_set)
    def __init__(self): 
        this = _lwrtb.new_BidResultEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_BidResultEvent
    __del__ = lambda self : None;
BidResultEvent_swigregister = _lwrtb.BidResultEvent_swigregister
BidResultEvent_swigregister(BidResultEvent)

class BidResultCb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidResultCb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BidResultCb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == BidResultCb:
            _self = None
        else:
            _self = self
        this = _lwrtb.new_BidResultCb(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_BidResultCb
    __del__ = lambda self : None;
    def call(self, *args): return _lwrtb.BidResultCb_call(self, *args)
    def __disown__(self):
        self.this.disown()
        _lwrtb.disown_BidResultCb(self)
        return weakref_proxy(self)
BidResultCb_swigregister = _lwrtb.BidResultCb_swigregister
BidResultCb_swigregister(BidResultCb)

class ErrorEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _lwrtb.ErrorEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _lwrtb.ErrorEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_lwrtb.ErrorEvent_timestamp_get, _lwrtb.ErrorEvent_timestamp_set)
    __swig_setmethods__["description"] = _lwrtb.ErrorEvent_description_set
    __swig_getmethods__["description"] = _lwrtb.ErrorEvent_description_get
    if _newclass:description = _swig_property(_lwrtb.ErrorEvent_description_get, _lwrtb.ErrorEvent_description_set)
    __swig_setmethods__["originalError"] = _lwrtb.ErrorEvent_originalError_set
    __swig_getmethods__["originalError"] = _lwrtb.ErrorEvent_originalError_get
    if _newclass:originalError = _swig_property(_lwrtb.ErrorEvent_originalError_get, _lwrtb.ErrorEvent_originalError_set)
    def __init__(self): 
        this = _lwrtb.new_ErrorEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_ErrorEvent
    __del__ = lambda self : None;
ErrorEvent_swigregister = _lwrtb.ErrorEvent_swigregister
ErrorEvent_swigregister(ErrorEvent)

class ErrorCb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorCb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorCb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ErrorCb:
            _self = None
        else:
            _self = self
        this = _lwrtb.new_ErrorCb(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_ErrorCb
    __del__ = lambda self : None;
    def call(self, *args): return _lwrtb.ErrorCb_call(self, *args)
    def __disown__(self):
        self.this.disown()
        _lwrtb.disown_ErrorCb(self)
        return weakref_proxy(self)
ErrorCb_swigregister = _lwrtb.ErrorCb_swigregister
ErrorCb_swigregister(ErrorCb)

class ByeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByeEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fromRouter"] = _lwrtb.ByeEvent_fromRouter_set
    __swig_getmethods__["fromRouter"] = _lwrtb.ByeEvent_fromRouter_get
    if _newclass:fromRouter = _swig_property(_lwrtb.ByeEvent_fromRouter_get, _lwrtb.ByeEvent_fromRouter_set)
    __swig_setmethods__["timestamp"] = _lwrtb.ByeEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _lwrtb.ByeEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_lwrtb.ByeEvent_timestamp_get, _lwrtb.ByeEvent_timestamp_set)
    def __init__(self): 
        this = _lwrtb.new_ByeEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_ByeEvent
    __del__ = lambda self : None;
ByeEvent_swigregister = _lwrtb.ByeEvent_swigregister
ByeEvent_swigregister(ByeEvent)

class ByeCb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByeCb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByeCb, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _lwrtb.new_ByeCb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_ByeCb
    __del__ = lambda self : None;
    def call(self, *args): return _lwrtb.ByeCb_call(self, *args)
ByeCb_swigregister = _lwrtb.ByeCb_swigregister
ByeCb_swigregister(ByeCb)

class Bidder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bidder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bidder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lwrtb.new_Bidder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lwrtb.delete_Bidder
    __del__ = lambda self : None;
    def init(self): return _lwrtb.Bidder_init(self)
    def start(self, sync = False): return _lwrtb.Bidder_start(self, sync)
    def shutdown(self): return _lwrtb.Bidder_shutdown(self)
    def doConfig(self, *args): return _lwrtb.Bidder_doConfig(self, *args)
    def doBid(self, *args): return _lwrtb.Bidder_doBid(self, *args)
    __swig_setmethods__["bid_request_cb_"] = _lwrtb.Bidder_bid_request_cb__set
    __swig_getmethods__["bid_request_cb_"] = _lwrtb.Bidder_bid_request_cb__get
    if _newclass:bid_request_cb_ = _swig_property(_lwrtb.Bidder_bid_request_cb__get, _lwrtb.Bidder_bid_request_cb__set)
    __swig_setmethods__["bid_result_cb_"] = _lwrtb.Bidder_bid_result_cb__set
    __swig_getmethods__["bid_result_cb_"] = _lwrtb.Bidder_bid_result_cb__get
    if _newclass:bid_result_cb_ = _swig_property(_lwrtb.Bidder_bid_result_cb__get, _lwrtb.Bidder_bid_result_cb__set)
    __swig_setmethods__["delivery_event_cb_"] = _lwrtb.Bidder_delivery_event_cb__set
    __swig_getmethods__["delivery_event_cb_"] = _lwrtb.Bidder_delivery_event_cb__get
    if _newclass:delivery_event_cb_ = _swig_property(_lwrtb.Bidder_delivery_event_cb__get, _lwrtb.Bidder_delivery_event_cb__set)
    __swig_setmethods__["error_cb_"] = _lwrtb.Bidder_error_cb__set
    __swig_getmethods__["error_cb_"] = _lwrtb.Bidder_error_cb__get
    if _newclass:error_cb_ = _swig_property(_lwrtb.Bidder_error_cb__get, _lwrtb.Bidder_error_cb__set)
    __swig_setmethods__["bye_cb_"] = _lwrtb.Bidder_bye_cb__set
    __swig_getmethods__["bye_cb_"] = _lwrtb.Bidder_bye_cb__get
    if _newclass:bye_cb_ = _swig_property(_lwrtb.Bidder_bye_cb__get, _lwrtb.Bidder_bye_cb__set)
    def setBidRequestCb(self, *args): return _lwrtb.Bidder_setBidRequestCb(self, *args)
    def setDeliveryCb(self, *args): return _lwrtb.Bidder_setDeliveryCb(self, *args)
    def setBidResultCb(self, *args): return _lwrtb.Bidder_setBidResultCb(self, *args)
    def setErrorCb(self, *args): return _lwrtb.Bidder_setErrorCb(self, *args)
    def setByeCb(self, *args): return _lwrtb.Bidder_setByeCb(self, *args)
Bidder_swigregister = _lwrtb.Bidder_swigregister
Bidder_swigregister(Bidder)

# This file is compatible with both classic and new-style classes.


